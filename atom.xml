<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>okiilemon&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-06T06:41:50.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>okiilemon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客重新开张</title>
    <link href="http://yoursite.com/2017/06/06/flag/"/>
    <id>http://yoursite.com/2017/06/06/flag/</id>
    <published>2017-06-06T06:21:28.000Z</published>
    <updated>2017-06-06T06:41:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>距离上次写博客…一不小心就两年了🌝 总是以懒为借口随便记在 Bear 一类的记事本上。最近深刻反省了一下自己，其中一个行动是重拾博客，坚持思考、记录、分享。<br>希望这篇文章不会成为 flag 😶<br><img src="http://s3.mogucdn.com/mlcdn/c45406/170606_0a2akh4ak28bi240gicl0edhgffjf_5616x2905.jpg" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;距离上次写博客…一不小心就两年了🌝 总是以懒为借口随便记在 Bear 一类的记事本上。最近深刻反省了一下自己，其中一个行动是重拾博客，坚持思考、记录、分享。&lt;br&gt;希望这篇文章不会成为 flag 😶&lt;br&gt;&lt;img src=&quot;http://s3.mogucdn.com/
    
    </summary>
    
    
      <category term="other" scheme="http://yoursite.com/tags/other/"/>
    
  </entry>
  
  <entry>
    <title>__proto__（隐式原型）与prototype（显式原型）</title>
    <link href="http://yoursite.com/2015/08/13/prototype/"/>
    <id>http://yoursite.com/2015/08/13/prototype/</id>
    <published>2015-08-13T03:58:57.000Z</published>
    <updated>2017-06-06T06:09:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-是什么"><a href="#1-是什么" class="headerlink" title="1. 是什么"></a><strong>1. 是什么</strong></h3><ul>
<li><p>显式原型 explicit prototype property：每一个<strong>函数</strong>在创建之后都会拥有一个名为<strong>prototype</strong>的属性，这个属性指向函数的原型对象。</p>
<a id="more"></a>
<p>Note：通过Function.prototype.bind方法构造出来的函数是个例外，它没有prototype属性。</p>
<blockquote>
<p>NOTE Function objects created using Function.prototype.bind do not have a prototype property or the [[Code]], [[FormalParameters]], and [[Scope]] internal properties. ”—– <a href="http://www.ecma-international.org/ecma-262/5.1/#sec-15.3.4.5" target="_blank" rel="external">ECMA262 15.3.4.5</a></p>
</blockquote>
</li>
<li><p>隐式原型 implicit prototype link：JavaScript中任意对象都有一个内置属性[[prototype]]，在ES5之前没有标准的方法访问这个内置属性，但是大多数浏览器都支持通过<strong>proto</strong>来访问。ES5中有了对于这个内置属性标准的Get方法Object.getPrototypeOf().Note: Object.prototype 这个对象是个例外，它的<strong>proto</strong>值为null</p>
</li>
<li>二者的关系：隐式原型指向<strong>创建</strong>这个对象的函数(constructor)的prototype</li>
</ul>
<p>#</p>
<h2 id="2-作用是什么"><a href="#2-作用是什么" class="headerlink" title="2. 作用是什么"></a><strong>2. 作用是什么</strong></h2><ul>
<li><p>显式原型的作用：用来实现基于原型的继承与属性的共享。</p>
<blockquote>
<p>Each constructor is a function that has <strong>a property named “prototype” that is used to implement prototype-based inheritance and shared properties.</strong> —-<a href="http://www.ecma-international.org/ecma-262/5.1/#sec-4.2.1" target="_blank" rel="external">ECMA262 4.2.1</a></p>
</blockquote>
</li>
<li><p>隐式原型的作用：构成原型链，同样用于实现基于原型的继承。举个例子，当我们访问obj这个对象中的x属性时，如果在obj中找不到，那么就会沿着<strong>proto</strong>依次查找。</p>
<blockquote>
<p>”Every object created by a constructor has an implicit reference (called the object’s prototype) to the value of its constructor’s “prototype” —-<a href="http://www.ecma-international.org/ecma-262/5.1/#sec-4.2.1" target="_blank" rel="external">ECMA262 4.2.1</a></p>
</blockquote>
</li>
</ul>
<h3 id="3-proto的指向"><a href="#3-proto的指向" class="headerlink" title="3. proto的指向"></a><strong>3. <strong>proto</strong>的指向</strong></h3><p><strong>proto</strong>的指向到底如何判断呢？根据ECMA定义 ‘to the value of its constructor’s “prototype” ’ —-指向创建这个对象的函数（这里且称为构造函数吧，虽然《You Don’t Know JS》的作者一直反复强调JS中没有构造函数，只有构造函数调用）的显式原型。所以关键的点在于找到创建这个对象的构造函数，接下来就来看一下JS中对象被创建的方式，一眼看过去似乎有三种方式：</p>
<p>（1）对象字面量的方式</p>
<p>（2）new 的方式</p>
<p>（3）ES5中的Object.create()</p>
<p>但是我认为本质上只有一种方式，也就是通过new来创建。为什么这么说呢，首先字面量的方式是一种为了开发人员更方便创建对象的一个语法糖，本质就是 var o = new Object(); o.xx = xx;o.yy=yy; 再来看看Object.create(),这是ES5中新增的方法，在这之前这被称为原型式继承，</p>
<p>“ 道格拉斯在2006年写了一篇文章，题为 Prototypal Inheritance In JavaScript。在这篇文章中，他介绍了一种实现继承的方法，这种方法并没有使用严格意义上的构造函数。他的想法是借助原型可以基于已有的对象创建新对象，同时还不比因此创建自定义类型，为了达到这个目的，他给出了如下函数: “<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function object(o)&#123; </div><div class="line">    function F()&#123;&#125;; </div><div class="line">    F.prototype = o; </div><div class="line">    return new F();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>– 《JavaScript高级程序设计》P169</p>
<p>所以从实现代码 return new F() 中我们可以看到，这依然是通过new来创建的。不同之处在于由Object.create()创建出来的对象没有构造函数，看到这里你是不是要问，没有构造函数我怎么知道它的<strong>proto</strong>指向哪里呢，其实这里说它没有构造函数是指在Object.create()函数外部我们不能访问到它的构造函数，然而在函数内部实现中是有的，它短暂地存在了那么一会儿。假设我们现在就在函数内部，可以看到对象的构造函数是F, 现在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//以下是用于验证的伪代码</div><div class="line">var f = new F(); </div><div class="line">//于是有</div><div class="line">f.__proto__ === F.prototype //true</div><div class="line">//又因为</div><div class="line">F.prototype === o;//true</div><div class="line">//所以</div><div class="line">f.__proto__ === o;</div></pre></td></tr></table></figure></p>
<p>因此由Object.create(o)创建出来的对象它的隐式原型指向o.好了，对象的创建方式分析完了，现在你应该能够判断一个对象的<strong>proto</strong>指向谁了。</p>
<p>好吧，还是举一些一眼看过去比较疑惑的例子来巩固一下。</p>
<ul>
<li><p>构造函数的显示原型的隐式原型：</p>
<ul>
<li>内建对象(built-in object)：比如Array（），Array.prototype.<strong>proto</strong>指向什么？Array.prototype也是一个对象，对象就是由 Object（）这个构造函数创建的，因此Array.prototype.<strong>proto</strong> === Object.prototype //true，或者也可以这么理解，所有的内建对象都是由Object()创建而来。</li>
</ul>
</li>
<li>自定义对象：</li>
</ul>
<p>(一) 默认情况下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function Foo()&#123;&#125;; </div><div class="line">var foo = new Foo(); </div><div class="line">Foo.prototype.__proto__ === Object.prototype//理由同上</div></pre></td></tr></table></figure></p>
<p>(二)其他情况：<br>(1)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function Bar()&#123;&#125;; //这时我们想让Foo继承Bar</div><div class="line">Foo.prototype = new Bar(); //于是</div><div class="line">Foo.prototype.__proto__ === Bar.prototype //true</div></pre></td></tr></table></figure></p>
<p>(2)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 我们不想让Foo继承谁，但是我们要自己重新定义Foo的原型</div><div class="line">    Foo.prototype = &#123;</div><div class="line">        a:10,</div><div class="line">        b:-10</div><div class="line">    &#125;</div><div class="line">//这种方式就是用了对象字面量的方式来创建一个对象，根据前文所述      </div><div class="line">Foo.prototype.__proto__ === Object.prototype</div></pre></td></tr></table></figure></p>
<p>注： 以上两种情况都等于完全重写了Foo.prototype，所以Foo.prototype.constructor也跟着改变了，于是乎constructor这个属性和原来的构造函数Foo（）也就切断了联系。</p>
<ul>
<li><p>构造函数的隐式原型</p>
<p>既然是构造函数那么它就是Function（）的实例，因此也就指向Function.prototyp<br>比如 Object.<strong>proto</strong> === Function.prototype</p>
</li>
</ul>
<h3 id="4-instanceof"><a href="#4-instanceof" class="headerlink" title="4. instanceof"></a><strong>4. instanceof</strong></h3><p>instanceof 操作符的内部实现机制和隐式原型、显式原型有直接的关系。instanceof的左值一般是一个对象，右值一般是一个构造函数，用来判断左值是否是右值的实例。它的内部实现原理是这样的： 设 L instanceof R , 通过判断 L.<strong>proto</strong>.<strong>proto</strong> ….. === R.prototype,最终返回true or false，也就是沿着L的<strong>proto</strong>一直寻找到原型链末端，直到等于R.prototype为止。知道了这个也就知道为什么以下这些奇怪的表达式为什么会得到相应的值了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Function instanceof Object // true </div><div class="line">Object instanceof Function // true </div><div class="line">Function instanceof Function //true</div><div class="line">Object  instanceof Object // true</div><div class="line">Number instanceof Number //false</div></pre></td></tr></table></figure></p>
<p>文章参考： <a href="https://www.ibm.com/developerworks/cn/web/1306_jiangjj_jsinstanceof/" target="_blank" rel="external">JavaScript instanceof 运算符深入剖析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-是什么&quot;&gt;&lt;a href=&quot;#1-是什么&quot; class=&quot;headerlink&quot; title=&quot;1. 是什么&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. 是什么&lt;/strong&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;显式原型 explicit prototype property：每一个&lt;strong&gt;函数&lt;/strong&gt;在创建之后都会拥有一个名为&lt;strong&gt;prototype&lt;/strong&gt;的属性，这个属性指向函数的原型对象。&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript核心原理（一）执行环境、执行环境栈、变量对象、活动对象</title>
    <link href="http://yoursite.com/2015/03/19/javascript-the-core-ec-ecs-ao-vo/"/>
    <id>http://yoursite.com/2015/03/19/javascript-the-core-ec-ecs-ao-vo/</id>
    <published>2015-03-18T23:39:25.000Z</published>
    <updated>2017-06-06T06:08:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p><span class="s1">之前在阅读《Javascript高级程序设计》「4.2执行环境及作用域的」时候，对相关的概念理解得并不是非常的透彻，只是懂了大概的意思。后来在看到「闭包」这一节时书中再一次提到了相关的概念，并且这些是充分理解闭包的必要背景知识，于是这一次我不能再略读了，必须彻彻底底地弄明白。啃了两天的相关文章、资料后，算是有一个比较清晰的认识了，现在记录下来，希望可以帮到同样对相关概念不熟悉的同学，也可以用作自己日后的回顾和修正。</span></p>
<a id="more"></a>
<p><span class="s1">注：Execution Context 可以被翻译为「执行上下文」或者「 执行环境」，文中可能都会用到，大家记住是一个东西就可以了。</span></p>
<h2 id="什么是执行环境（Execution-Context）？"><a href="#什么是执行环境（Execution-Context）？" class="headerlink" title="什么是执行环境（Execution Context）？"></a><strong>什么是执行环境（Execution Context）？</strong></h2><p><em>“每当程序的执行流进入到一个可执行的代码时，就进入到了一个<strong>执行环境</strong>中。”</em></p>
<p>执行环境是 ECMA-262 中用以区分不同的可执行代码的抽象概念<br>可执行代码的类型可以为分为：</p>
<ul>
<li>全局代码：程序载入后的默认环境，是运行在程序级别的代码。</li>
<li>函数代码：当执行流进入一个函数后。</li>
<li>Eval代码：Eval 内部的代码。</li>
</ul>
<h1 id="执行环境栈（Execution-Stack）"><a href="#执行环境栈（Execution-Stack）" class="headerlink" title="执行环境栈（Execution Stack）"></a><strong>执行环境栈（Execution Stack）</strong></h1><p><span class="s1">执行流依次进入的执行环境在逻辑上形成了一个栈，栈的底部永远是全局环境，栈的顶部则是处于活动状态当前的执行环境(浏览器总是执行处于栈顶的上下文)。当执行流进入一个函数时，函数的环境就会被推入这个环境栈中，当函数执行完毕之后，栈将这个执行环境弹出，然后把控制权返回给之前的执行环境。这样实现的原因是由于 Javascript 解释器是单线程的，也就是同一时刻只能发生一件事情，其他等待执行的上下文或事件就会在这个环境栈中排队等待。值得注意的一点是：每次函数的调用都会创建一个执行环境压入栈中，无论是函数内部的函数、还是递归调用等。 </span></p>
<p>我们用数组来表示执行环境栈：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ECStack = [];</div></pre></td></tr></table></figure></p>
<p>来看下面这个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(i === <span class="number">3</span>)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">"Well,the current FunctionContext is finished."</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span>&#123;</div><div class="line">    foo(++i);</div><div class="line">  &#125;</div><div class="line">&#125;)(<span class="number">1</span>);</div></pre></td></tr></table></figure><br>这个函数会被调用3次，分别是 i = 1,i = 2,i = 3 的时候，每次被调用的时候都会创建一个执行上下文然后压入栈中，执行完毕之后再被弹出，最后将控制权交给栈底的全局环境。当第三次调用 foo 函数也就是 i = 3 时，ECStack 状态如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ECStack = </div><div class="line">[</div><div class="line">   //栈顶</div><div class="line">   FunctionContext - foo(3);</div><div class="line">   FunctionContext - foo(2);</div><div class="line">   FunctionContext - foo(1);</div><div class="line">   GlobalContext</div><div class="line">   //栈底</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h2 id="变量对象-（Variable-Object）"><a href="#变量对象-（Variable-Object）" class="headerlink" title="变量对象 （Variable Object）"></a><strong>变量对象 （Variable Object）</strong></h2><p><em>每一个执行环境都有一个与之相关的<strong>变量对象</strong>，其中存储着上下文中声明的：</em></p>
<ul>
<li><span class="s1">变量 VariableDeclaration VD</span></li>
<li><span class="s1">函数 FunctionDeclaration FD</span></li>
<li><span class="s1">形式参数 formal parameters</span></li>
</ul>
<p><span class="s1">我们可以用一个对象来表示变量对象：</span></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">VO = &#123;</div><div class="line">  // 执行上下文中声明的变量、函数、形式参数</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="不同执行环境下的变量对象"><a href="#不同执行环境下的变量对象" class="headerlink" title="不同执行环境下的变量对象"></a><strong>不同执行环境下的变量对象</strong></h2><p><span class="s1">变量对象是一个抽象的概念，在进入具体的执行上下文时，变量对象在具体实现上也会有相应地差别。</span></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">AbstractVO (generic behavior of the variable instantiation process)</div><div class="line"></div><div class="line">║</div><div class="line">╠══&gt; GlobalContextVO</div><div class="line">║      </div><div class="line">       (VO === this === global)</div><div class="line">║</div><div class="line">╚══&gt; FunctionContextVO</div><div class="line"></div><div class="line">       (VO === AO, &lt;arguments&gt; object and &lt;formal parameters&gt; are added)</div></pre></td></tr></table></figure>
<h4 id="全局上下文中的变量对象"><a href="#全局上下文中的变量对象" class="headerlink" title="全局上下文中的变量对象"></a><strong>全局上下文中的变量对象</strong></h4><p><span class="s1"><em>全局对象是一个在进入任何执行上下文前就创建出来的对象；此对象以单例形式存在；它的属性在程序任何地方都可以直接访问，其生命周期随着程序的结束而终止。</em></span></p>
<p><span class="s1">全局对象的属性在任何地方都可以被访问到，可以通过 this 或者 DOM 中的 Window 对象来访问。<strong>全局对象中的变量对象就是全局对象本身</strong>，理解这一点很重要，正是因为这个原因才使得可以通过全局对象的属性来访问在全局上下文中声明的变量。</span></p>
<h4 id="函数上下文中的变量对象"><a href="#函数上下文中的变量对象" class="headerlink" title="函数上下文中的变量对象"></a><strong>函数上下文中的变量对象</strong></h4><p><span class="s1">当函数被调用时，一个特殊的对象——<strong>活动对象</strong>就随之创建了。变量对象通过函数的 arguments 对象来初始化，arguments 对象是活动对象上的属性，包含了以下属性：</span></p>
<ul>
<li><span class="s1">callee 对当前函数的引用</span></li>
<li><span class="s1">length 传入的实参个数</span></li>
<li><span class="s1">properties-indexes 参数对应的索引值，相应的值和实际传入的参数值是共享的，但不并是存储在同一个地方的</span></li>
</ul>
<h2 id="执行环境的具体细节"><a href="#执行环境的具体细节" class="headerlink" title="执行环境的具体细节"></a><strong>执行环境的具体细节</strong></h2><p>我们同样也可以用一个对象来表示执行上下文：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ExecutionContextObj = &#123;</div><div class="line">    scopeChain: &#123; 变量对象（variableObject）+ 所有父执行上下文的变量对象 &#125;, </div><div class="line">    variableObject: &#123; &lt;arguments&gt;对象，内部变量声明和函数声明 &#125;, </div><div class="line">    this:&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>每当一个函数被调用的时候，就会随之创建一个执行上下文，在 Javascript 解释器内部处理执行上下文有两个步骤：</p>
<ul>
<li><p>第一步：创建阶段 （在函数调用之后，函数体执行之前），解释器扫描传递给函数的参数或arguments，本地函数声明和本地变量声明，并创建executionContextObj对象。扫描的结果将完成变量对象的创建<br>*创建作用域链 （Scope Chain\</p>
<ul>
<li><p>扫描上下文中声明的形式参数、函数以及变量，并依次填充变量对象的属性</p>
</li>
<li><p><span class="s1">函数的形参：形参作为属性，对应的实参作为值。对于没有实参的形参，值为undefined。</span></p>
</li>
<li><span class="s1">函数声明（FunctionDeclaration FD）:由函数对象创建出相应的名、值，名就是函数名、值就是函数体。如果变量对象已经包含了同名的属性，就会替换掉它的值。</span></li>
<li><span class="s1">变量声明（VariableDeclaration）:属性名是变量名，值初始化为 undefined。如果变量名和已经存在的属性同名，不会影响到同名的属性。</span></li>
<li><p><span class="s1">注意：函数表达式（FunctionExpression FE）不会成为变量对象的属性，也就是说函数表达式不会影响到变量对象。</span></p>
</li>
<li><p>求出上下文“this”的值</p>
</li>
</ul>
</li>
<li><p><span class="s1">第二步：代码执行阶段</span></p>
<ul>
<li><span class="s1">这一阶段就会给第一步中初始值为 undefined 的变量赋上相应的值</span><br>我们来看下面这个例子：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x,y,z</span>)</span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">  <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">  (<span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span>&#123;&#125;)();</div><div class="line"></div><div class="line">&#125;)(<span class="number">10</span>，<span class="number">20</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>函数调用后，相应的executionContextObj如下：</p>
<p>第一阶段<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">executionContextObj = &#123;</div><div class="line">	<span class="attr">scopeChain</span>:&#123;...&#125;,</div><div class="line">	<span class="attr">VO</span>: &#123;</div><div class="line">		<span class="attr">arguments</span>:&#123;</div><div class="line">		    <span class="attr">x</span>:<span class="number">10</span>,</div><div class="line">		    <span class="attr">y</span>:<span class="number">20</span>,</div><div class="line">		    <span class="attr">Z</span>:<span class="literal">undefined</span>,</div><div class="line">		    <span class="attr">length</span>:<span class="number">2</span>,<span class="comment">//这里是实际传入参数的个数</span></div><div class="line">		    callee:pointer to <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span></div><div class="line">		  &#125;</div><div class="line">	  <span class="title">a</span>:<span class="title">undefined</span>,</div><div class="line">	  <span class="title">b</span>:<span class="title">undefined</span>,</div><div class="line">	  <span class="title">c</span>:<span class="title">pointer</span> <span class="title">to</span> <span class="title">function</span> <span class="title">c</span>(<span class="params"></span>)</div><div class="line">	&#125;,</div><div class="line">	<span class="title">this</span>:&#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>第二阶段：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">executionContextObj = &#123;</div><div class="line">	<span class="attr">scopeChain</span>:&#123;...&#125;,</div><div class="line">	<span class="attr">VO</span>: &#123;</div><div class="line">		<span class="attr">arguments</span>:&#123;</div><div class="line">		    <span class="attr">x</span>:<span class="number">10</span>,</div><div class="line">		    <span class="attr">y</span>:<span class="number">20</span>,</div><div class="line">		    <span class="attr">Z</span>:<span class="literal">undefined</span>,</div><div class="line">		    <span class="attr">length</span>:<span class="number">2</span>,<span class="comment">//这里是实际传入参数的个数</span></div><div class="line">		    callee:pointer to <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span></div><div class="line">		&#125;</div><div class="line">		<span class="title">a</span>:1,</div><div class="line">		<span class="title">b</span>:<span class="title">pointer</span> <span class="title">to</span> <span class="title">function</span> <span class="title">b</span>(<span class="params"></span>),</div><div class="line">		<span class="title">c</span>:<span class="title">pointer</span> <span class="title">to</span> <span class="title">function</span> <span class="title">c</span>(<span class="params"></span>)</div><div class="line">	&#125;,</div><div class="line">	<span class="title">this</span>:&#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>在第二阶段，就会为局部变量 a 、b 赋值，注意到 d 并没有在变量对象中，正如上文中提到的那样，函数表达式是不会影响变量对象的，所以在作用域中任何一个位置引用d都会出现“d is not defined”的错误。</p>
<p>现在你应该非常清楚JS中的变量、函数声明提升是怎么回事了吧。</p>
<p>举个例子吧：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> x);<span class="comment">//"function"</span></div><div class="line">  <span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line">  <span class="built_in">console</span>.log(y);<span class="comment">//undefined 而不是 “y is not defined” ,这就是变量声明提升！</span></div><div class="line">  <span class="keyword">var</span> y = <span class="number">20</span>;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> x);<span class="comment">//"number"</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>)</span>&#123;&#125; </div><div class="line"></div><div class="line">&#125;)()</div></pre></td></tr></table></figure></p>
<p>为什么第一次打印x的类型是函数，第二次打印x的类型又是数字呢。这是因为，根据创建上下文时的规则，函数调用之后会按照顺序依次把函数参数、函数声明、变量声明填充为VO的属性，并且填充变量声明的时候如果同名是不会造成任何影响的，x的值还是函数。</p>
<p>在进入上下文阶段，VO的状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">VO = &#123;</div><div class="line">  x:pointer to function x()</div><div class="line">&#125;</div><div class="line">//发现var x = 10;</div><div class="line">//如果函数“x”还未定义,则 &quot;x&quot; 的值为undefined, </div><div class="line">//但是，在这个例子中</div><div class="line">//变量声明并不会影响同名的值为函数的x</div></pre></td></tr></table></figure></p>
<p>VO[‘x’] 的值仍未改变<br>在代码执行阶段，VO的状态：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">VO[&apos;x&apos;] = 10;</div></pre></td></tr></table></figure>
<p>这一阶段，局部变量 x 被赋值，此时之前同名的值为函数的 x 就会被覆盖，大家注意声明和赋值！！第一阶段，局部变量声明同名不会影响；第二阶段局部变量赋值就会产生影响了，毕竟人家是最后赋值的嘛。</p>
<p>最后，再来说说关于变量声明的问题：</p>
<p>在《Javascript高级程序设计》4.2.2一节当中有这么一句话：“如果初始化变量时没有使用var声明，该变量会自动被添加到全局环境中。” 首先，我们应该先明确一点，<em>使用var关键字是声明变量的唯一方式。如果没有var 的话，例如 a = 5 ，a 就将作为全局对象的一个属性，而不是一个变量。</em></p>
<p>区别如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">alert(x); //&quot;x&quot; is not defined</div><div class="line">alert(b); //&quot;undefined</div><div class="line"></div><div class="line">x = 10;</div><div class="line">var y = 20;</div></pre></td></tr></table></figure></p>
<p>进入上下文后第一阶段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">VO = &#123;</div><div class="line">  x:10;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>VO 中并没有y的原因是，y 并不是变量。另外还要注意的一点就是，没有通过 var 声明的属性可以通过delete操作符删除，而通过var声明的变量就不可以。</p>
<p>啊，差不多把要说的点都说了，如果大家觉得我总结得不好，可以看看以下几篇原文，然后欢迎讨论指出问题哈。</p>
<p>文章参考：</p>
<ul>
<li><a href="http://dmitrysoshnikov.com/ecmascript/chapter-1-execution-contexts/" target="_blank" rel="external">ECMA-262-3 in detail. Chapter 1. Execution Contexts.</a> |<a href="http://goddyzhao.tumblr.com/post/10020230352/execution-context" target="_blank" rel="external">中文版</a></li>
<li><a href="http://dmitrysoshnikov.com/ecmascript/chapter-2-variable-object/" target="_blank" rel="external">ECMA-262-3 in detail. Chapter 2. Variable object.</a> |<a href="http://goddyzhao.tumblr.com/post/11141710441/variable-object" target="_blank" rel="external">中文版</a></li>
<li><a href="http://davidshariff.com/blog/what-is-the-execution-context-in-javascript/" target="_blank" rel="external">What is the Execution Context &amp; Stack in JavaScript?</a> | <a href="http://yanhaijing.com/javascript/2014/04/29/what-is-the-execution-context-in-javascript/" target="_blank" rel="external">中文版</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span class=&quot;s1&quot;&gt;之前在阅读《Javascript高级程序设计》「4.2执行环境及作用域的」时候，对相关的概念理解得并不是非常的透彻，只是懂了大概的意思。后来在看到「闭包」这一节时书中再一次提到了相关的概念，并且这些是充分理解闭包的必要背景知识，于是这一次我不能再略读了，必须彻彻底底地弄明白。啃了两天的相关文章、资料后，算是有一个比较清晰的认识了，现在记录下来，希望可以帮到同样对相关概念不熟悉的同学，也可以用作自己日后的回顾和修正。&lt;/span&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript The Core" scheme="http://yoursite.com/categories/Javascript-The-Core/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript中值的访问与参数传递问题</title>
    <link href="http://yoursite.com/2014/12/19/call-by-sharing/"/>
    <id>http://yoursite.com/2014/12/19/call-by-sharing/</id>
    <published>2014-12-19T05:11:50.000Z</published>
    <updated>2017-06-06T06:08:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>在 JavaScript 中数据类型可以分为两类：</p>
<ul>
<li><strong>原始数据类型值</strong> primitive type，比如 Undefined, Null, Boolean, Number, String。</li>
<li><strong>引用类型值</strong>，也就是对象类型 Object type，比如 Object, Array, Function, Date 等。</li>
</ul>
<a id="more"></a>
<h3 id="声明变量时不同的内存分配"><a href="#声明变量时不同的内存分配" class="headerlink" title="声明变量时不同的内存分配"></a>声明变量时不同的内存分配</h3><ul>
<li>原始值：存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在<strong>变量访问的位置</strong>。这是因为这些原始类型占据的空间是固定的，所以可将他们存储在较小的内存区域 - 栈中。这样存储便于迅速查寻变量的值。</li>
<li>引用值：存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存地址。这是因为：引用值的大小会改变，所以不能把它放在栈中，否则会降低变量查寻的速度。相反，放在变量的栈空间中的值是该对象存储在堆中的地址。地址的大小是固定的，所以把它存储在栈中对变量性能无任何负面影响。</li>
</ul>
<h3 id="不同的内存分配机制也带来了不同的访问机制"><a href="#不同的内存分配机制也带来了不同的访问机制" class="headerlink" title="不同的内存分配机制也带来了不同的访问机制"></a>不同的内存分配机制也带来了不同的访问机制</h3><p>在javascript中是不允许直接访问保存在堆内存中的对象的，所以在访问一个对象时，首先得到的是这个对象在堆内存中的地址，然后再按照这个地址去获得这个对象中的值，这就是传说中的<strong>按引用访问</strong>。而原始类型的值则是可以直接访问到的。</p>
<h3 id="复制变量时的不同"><a href="#复制变量时的不同" class="headerlink" title="复制变量时的不同"></a>复制变量时的不同</h3><ul>
<li><p>原始值：在将一个保存着原始值的变量复制给另一个变量时，会将原始值的副本赋值给新变量，此后这两个变量是完全独立的，他们只是拥有相同的value而已。</p>
</li>
<li><p>引用值：在将一个保存着对象内存地址的变量复制给另一个变量时，会把这个内存地址赋值给新变量，也就是说这两个变量都指向了堆内存中的同一个对象，他们中任何一个作出的改变都会反映在另一个身上。（这里要理解的一点就是，复制对象时并不会在堆内存中新生成一个一模一样的对象，只是多了一个保存指向这个对象指针的变量罢了）</p>
</li>
</ul>
<h3 id="参数传递的不同"><a href="#参数传递的不同" class="headerlink" title="参数传递的不同"></a>参数传递的不同</h3><p>首先我们应该明确一点：ECMAScript中所有函数的参数都<strong>是按值来传递</strong>的。但是为什么涉及到原始类型与引用类型的值时仍然有区别呢，还不就是因为内存分配时的差别。 （我对比了一下，这里和复制变量时遵循的机制完全一样的嘛，你可以简单地理解为传递参数的时候，就是把实参复制给形参的过程）</p>
<ul>
<li>原始值：只是把变量里的值传递给参数，之后参数和这个变量互不影响。</li>
<li>引用值：对象变量它里面的值是这个对象在堆内存中的内存地址，这一点你要时刻铭记在心！因此它传递的值也就是这个内存地址，这也就是为什么函数内部对这个参数的修改会体现在外部的原因了，因为它们都指向同一个对象呀。或许我这么说了以后你对书上的例子还是有点不太理解，那么请看图吧：<br><img src="https://pic1.zhimg.com/33472bcc2789b7d071f119169b7d6e20_b.jpg" alt="image"><br>所以，如果是按引用传递的话，是把第二格中的内容（也就是变量本身）整个传递进去（就不会有第四格的存在了）。但事实是变量把它里面的值传递（复制）给了参数，让这个参数也指向原对象。因此如果在函数内部给这个参数赋值另一个对象时，这个参数就会更改它的值为新对象的内存地址指向新的对象，但此时原来的变量仍然指向原来的对象，这时候他们是相互独立的；但如果这个参数是改变对象内部的属性的话，这个改变会体现在外部，因为他们共同指向的这个对象被修改了呀！来看下面这个例子吧：（传说中的call by sharing）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;</div><div class="line">	<span class="attr">value</span>:<span class="string">'111'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj2 = &#123;</div><div class="line">  	<span class="attr">value</span>:<span class="string">'222'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeStuff</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">  	obj.value = <span class="string">'333'</span></div><div class="line">  	obj = obj2</div><div class="line">  	<span class="keyword">return</span> obj.value</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> foo = changeStuff(obj1)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo)<span class="comment">// '222' 参数obj指向了新的对象obj2</span></div><div class="line"><span class="built_in">console</span>.log(obj1.value)</div><div class="line"><span class="comment">/* '333' obj1仍然指向原来的对象,之所以value改变了,</span></div><div class="line"> *是因为changeStuff里的第一条语句，这个时候obj是指向obj1的 .</div><div class="line"> *再啰嗦一句，如果是按引用传递的话，这个时候obj1.value应该是等于'222'的</div><div class="line">*/</div></pre></td></tr></table></figure>
好了，以上就是关于这个问题的全部解释了。</li>
</ul>
<p>各位有兴趣的话可以去了解一下call by value ,call by reference call by sharing 等函数传递的机制<br><a href="http://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing" target="_blank" rel="external">call by sharing</a></p>
<p>还有stackoverflow上对于函数传递的这个问题解释得相当精辟，值得一看。</p>
<p>参考：</p>
<ul>
<li><a href="http://www.w3school.com.cn/js/pro_js_value.asp" target="_blank" rel="external">ECMAScript 原始值和引用值</a></li>
<li><a href="http://stackoverflow.com/questions/518000/is-javascript-a-pass-by-reference-or-pass-by-value-language?lq=1" target="_blank" rel="external">Is JavaScript a pass-by-reference or pass-by-value language?</a></li>
<li>我的红宝书《javascript高级程序设计》P69-P71</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h3&gt;&lt;p&gt;在 JavaScript 中数据类型可以分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原始数据类型值&lt;/strong&gt; primitive type，比如 Undefined, Null, Boolean, Number, String。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;引用类型值&lt;/strong&gt;，也就是对象类型 Object type，比如 Object, Array, Function, Date 等。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>什么是伪元素:after和:before</title>
    <link href="http://yoursite.com/2014/11/02/pseudo-element/"/>
    <id>http://yoursite.com/2014/11/02/pseudo-element/</id>
    <published>2014-11-02T04:24:23.000Z</published>
    <updated>2017-06-06T06:09:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>或许你在很多网页的源码上已经不止一次的见过:before 和 :after了，或者是别人利用伪元素做出各种酷炫效果..看见它俩陌生的面孔是不是有些害怕但又很想征服它们运用在自己的项目中呢？希望读完本篇文章后你就可以和它俩混熟了~<br><a id="more"></a></p>
<p>在学会使用伪元素之前，先来了解一下什么是伪元素以及它们的工作原理。</p>
<p>很多时候我们希望实现某种效果或是完成某些工作，但是又不希望破坏HTML的语义化，增加一个标签仅仅是为了去达成我们的目的却和结构完全没关系，一名优秀的前端工程师是绝对不会这么干的。那么这个时候，伪元素就该闪亮登场了~ </p>
<p>首先还是让我们来看看官方对伪元素的定义吧: <a href="http://www.w3.org/TR/selectors/#pseudo-elements" target="_blank" rel="external"><strong>Pseudo-elements</strong></a> </p>
<p>额，为了照顾看见英文就头疼的同学，我尽力翻译一下吧：</p>
<p>“伪元素在标记语言创建的DOM树之外创造了一种抽象（的对象）。例如：标记语言并不提供可以直接控制元素中第一行内容或第一个字这样的机制，而伪元素就允许开发人员去特指这些无法触及的内容；伪元素也提供了开发人员一种方法，可以特指一些原本在源文档（Dom树）中并不存在的内容（例如：:before 和 :after可以<strong>创建</strong>内容）。”</p>
<p><strong>tip</strong>:关于双冒号还是单冒号的问题，双冒号::是CSS3的新语法，为了区分伪类和伪元素，但是IE8不兼容双冒号语法，所以如果要考虑到兼容IE建议使用单冒号，否则应当遵循最新规范的双冒号语法。</p>
<p>具体用法：</p>
<p>还是举个栗子最直观</p>
<pre class="lang:css decode:true ">&lt;p&gt;Today is a fine day&lt;/p&gt;

&lt;p&gt;
  &lt;before&gt; Yes &lt;/before&gt;
   Today is a fine day
  &lt;after&gt;  No  &lt;/after&gt;
&lt;/p&gt;</pre> 

<p>上面3-7行的代码是以下CSS转换成标记语言的等同效果</p>
<pre class="lang:css decode:true ">p:before{
  content:"Yes";
}

p:after{
  content:"No";
}</pre> 

<p>也就是说，:before是在元素的内容之前插入/创建一个虚拟的元素，:after 是在元素的内容之后插入/创建一个虚拟的元素 （我是这么理解的：相当于插入一个first-child和last-child,如果这么理解不恰当，请指出~）</p>
<p>其中，content属性是必须声明的，它的值可以是：</p>
<p>1.字符串：eg. content:”abcd”;<br>2.图片：eg. content:url(…);<br>  注：图片会按实际尺寸插入并且无法改变其大小。<br>3.空：eg. content:” “;<br>  感觉这个用途是最广泛的，可以发挥你的想象让这个空胜于有。比如可以设为空然后给伪元素设置背景图像，这样就可以修改图片的大小了。<br>4.计数器：eg. content: counter(li); 在列表时计算行数非常方便。</p>
<p><strong>tip:</strong>伪元素默认生成的是一个<strong>内联元素</strong>，可以根据需要设置display:block;</p>
<p>浏览器支持情况：</p>
<p>1.Firefox 3.5- 不支持伪元素的绝对定位。<br>2.Opera 9.2里，伪元素里的空格会显示，如同在pre里一样。<br>3.IE 8 不支持伪元素里的z-index</p>
<p>今天就介绍到这里，在下篇文章中将向大家展示一些伪元素的妙用和那些酷炫效果。</p>
<p>文章参考：</p>
<p><a href="http://www.tinghaige.com/understanding-pseudo-element-before-and-after.html" title="理解伪元素:Before和:After" target="_blank" rel="external">理解伪元素:Before和:After</a><br><a href="http://ithelp.ithome.com.tw/question/10128451" title="CSS沒有極限 - 別忘了偽元素" target="_blank" rel="external">CSS沒有極限 - 別忘了偽元素</a><br><a href="http://www.webhek.com/after-before/" title="伪元素::after和::before" target="_blank" rel="external">伪元素::after和::before</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;或许你在很多网页的源码上已经不止一次的见过:before 和 :after了，或者是别人利用伪元素做出各种酷炫效果..看见它俩陌生的面孔是不是有些害怕但又很想征服它们运用在自己的项目中呢？希望读完本篇文章后你就可以和它俩混熟了~&lt;br&gt;
    
    </summary>
    
      <category term="HTML/CSS" scheme="http://yoursite.com/categories/HTML-CSS/"/>
    
    
  </entry>
  
</feed>
